name: Build MySQL with RocksDB Engine

on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '**/mysql-rocksdb.yml'  
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch:
env:
  gcc_indiff_ubuntu_url: "https://github.com/indiff/gcc-build/releases/download/20250416_1126/gcc-indiff-ubuntu-x86_64-20250416_1125.xz"
  gcc_indiff_centos7_url: "https://github.com/indiff/gcc-build/releases/download/20250513_1723_16.0.0/gcc-indiff-centos7-16.0.0-x86_64-20250513_1721.xz"
jobs:
  build-in-ubuntu:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout MySQL and RocksDB
        uses: actions/checkout@v5

      # Step 2: 安装依赖
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y systemd language-pack-zh-hans language-pack-zh-hans-base locales tree
          sudo locale-gen zh_CN.UTF-8; /usr/bin/localectl set-locale LANG=zh_CN.UTF-8 || true ; 
          /usr/bin/timedatectl set-timezone Asia/Shanghai || true; 
          /usr/bin/timedatectl set-ntp true || true;
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt upgrade
          # 安装GCC 14
          sudo apt install gcc-14
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 14
          gcc --version
          g++ --version
          make --version
            
            
          sudo apt-get update
          # protobuf-compiler libprotobuf-dev libprotoc-dev \
          sudo apt-get install -y \
            build-essential cmake ninja-build \
            libjemalloc-dev \
            libaio-dev \
            libncurses-dev \
            libssl-dev \
            libgflags-dev \
            libnuma-dev \
            libldap-dev libldap2-dev \
            curl libcurl4-openssl-dev bison libudev-dev libkrb5-dev libreadline-dev zlib1g-dev liblz4-dev libedit-dev libevent-dev libsasl2-dev libsasl2-modules-gssapi-mit libicu-dev libtirpc-dev

      # Step 3: 克隆 MySQL 源码
      - name: Clone MySQL Source
        run: |
          # git clone --filter=blob:none --depth 1 -b 8.0  https://github.com/mysql/mysql-server.git
          # git clone --filter=blob:none --depth 1 https://github.com/mysql/mysql-server.git
          git clone --filter=blob:none --depth 1 https://github.com/percona/percona-server.git -b 8.0
          cd percona-server
          git submodule update --init --recursive
          cd ..
          

      # Step 4: vcpkg
      - name: vcpkg
        run: |
          git clone --filter=blob:none --depth 1 https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          export VCPKG_ROOT=$(pwd)/vcpkg
          # 写入自定义 triplet
          # mkdir -p $VCPKG_ROOT/vcpkg-triplets
          # cat >$VCPKG_ROOT/vcpkg-triplets/x64-linux-static.cmake <<'EOF'
          # set(VCPKG_TARGET_ARCHITECTURE x64)
          # set(VCPKG_CMAKE_SYSTEM_NAME Linux)
          # set(VCPKG_CRT_LINKAGE dynamic)
          # set(VCPKG_LIBRARY_LINKAGE static)
          # set(VCPKG_BUILD_TYPE release)
          # EOF

          # 安装依赖（静态）
          # $VCPKG_ROOT/vcpkg install lz4 zstd snappy jemalloc openssl protobuf \
          #   --triplet x64-linux-static \
          #   --overlay-triplets=$VCPKG_ROOT/vcpkg-triplets
          #  protobuf
          $VCPKG_ROOT/vcpkg install lz4 zstd snappy jemalloc openssl --triplet x64-linux
          TRIPLET=x64-linux
          DEPS_SRC="$VCPKG_ROOT/installed/$TRIPLET"
          DEPS_DST="/opt/mysql-percona80"
          sudo mkdir -p "$DEPS_DST"/{include,lib,lib64}

          # 2) 复制头文件与动态库（.so 与 .so.*）及 pkgconfig
          sudo rsync -a "$DEPS_SRC/include/" "$DEPS_DST/include/"
          sudo rsync -a "$DEPS_SRC/lib/"      "$DEPS_DST/lib/"      || true
          sudo rsync -a "$DEPS_SRC/lib64/"    "$DEPS_DST/lib64/"    || true
          for d in lib lib64; do
            [[ -d "$DEPS_DST/$d/pkgconfig" ]] || mkdir -p "$DEPS_DST/$d/pkgconfig"
            sudo rsync -a "$DEPS_SRC/$d/pkgconfig/" "$DEPS_DST/$d/pkgconfig/" 2>/dev/null || true
          done

      # Step 6: 配置 MySQL 构建
      - name: Configure percona80 Build
        run: |
          set -xe
          export VCPKG_ROOT=$(pwd)/vcpkg
          DEPS_DST="/opt/mysql-percona80"
          mkdir -p percona-server/build percona-server/boost
          cd percona-server/build
          # cmake .. -LH
          # echo "*********************************************"

          # 供 CMake/ld 查找 vcpkg 拷贝到 /opt 的头文件与库
          export CMAKE_PREFIX_PATH="$DEPS_DST${CMAKE_PREFIX_PATH:+:$CMAKE_PREFIX_PATH}"
          export CMAKE_LIBRARY_PATH="$DEPS_DST/lib:$DEPS_DST/lib64${CMAKE_LIBRARY_PATH:+:$CMAKE_LIBRARY_PATH}"
          export CMAKE_INCLUDE_PATH="$DEPS_DST/include${CMAKE_INCLUDE_PATH:+:$CMAKE_INCLUDE_PATH}"
          export PKG_CONFIG_PATH="$DEPS_DST/lib/pkgconfig:$DEPS_DST/lib64/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
          # 链接期搜索路径（关键修复 -ljemalloc not found）
          export LIBRARY_PATH="$DEPS_DST/lib:$DEPS_DST/lib64${LIBRARY_PATH:+:$LIBRARY_PATH}"
          export LD_LIBRARY_PATH="$DEPS_DST/lib:$DEPS_DST/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"

          # 避免外部 protobuf 干扰
          unset PROTOC
          sudo cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX=/opt/mysql-percona80 \
            -DCMAKE_EXE_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64" \
            -DCMAKE_SHARED_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64" \
            -DCMAKE_MODULE_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64" \
            -DWITH_BOOST=boost -DDOWNLOAD_BOOST=1 -DWITH_BOOST=../boost \
            -DWITH_ROCKSDB=ON \
            -DWITH_LZ4=system -DWITH_ZSTD=system -DWITH_SNAPPY=system -DWITH_JEMALLOC=system \
            -DWITH_SSL=system -DOPENSSL_ROOT_DIR="$DEPS_DST" \
            -DWITH_PROTOBUF=bundled \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_RPATH='$ORIGIN/../lib:$ORIGIN/../lib64' \
            -DCMAKE_BUILD_RPATH='$ORIGIN/../lib:$ORIGIN/../lib64' \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \
            -DWITH_UNIT_TESTS=0 \
            -DWITH_DOCS=OFF -DWITH_MAN_PAGES=OFF
          # Ninja 默认详细，便于定位真实失败点
          sudo cmake --build . -j"$(nproc)"
          sudo cmake --install .
          # sudo make install
            

      # Step 8: 安装 MySQL
      - name: Install percona80
        run: |
          cd /opt/mysql-percona80
          # zip -r -q -9 /opt/mysql-percona80.xz .
          zip -r -q -9 ${{ github.workspace }}/percona80-ubuntu-x86_64-$(date +'%Y%m%d_%H%M').xz .


      # Step 9: 配置 MySQL 并启用 RocksDB 存储引擎
      - name: Configure percona80 with RocksDB
        if: false
        run: |
          # 初始化数据目录
          sudo rm -rf /opt/mysql-percona80/data || true
          sudo mkdir -p /opt/mysql-percona80/{data,log,run,tmp}
          sudo chown -R "$USER":"$USER" /opt/mysql-percona80
          /opt/mysql-percona80/bin/mysqld --initialize-insecure --basedir=/opt/mysql-percona80 --datadir=/opt/mysql-percona80/data
          # 最小 my.cnf（启用 rocksdb 并设为默认引擎）
          cat >/opt/mysql-percona80/my.cnf <<'CNF'
          [mysqld]
          basedir=/opt/mysql-percona80
          datadir=/opt/mysql-percona80/data
          socket=/opt/mysql-percona80/mysql.sock
          pid-file=/opt/mysql-percona80/run/mysqld.pid
          log-error=/opt/mysql-percona80/log/error.log
          port=3306
          plugin-load-add=ha_rocksdb.so
          default-storage-engine=ROCKSDB
          rocksdb
          CNF

          # 2) 初始化（不读取系统配置，避免写 /var/log/mysql）
          /opt/mysql-percona80/bin/mysqld --no-defaults \
            --initialize-insecure \
            --basedir=/opt/mysql-percona80 \
            --datadir=/opt/mysql-percona80/data \
            --log-error=/opt/mysql-percona80/log/init.err

          # 3) 启动（非 root 不要 --user）
          /opt/mysql-percona80/bin/mysqld --defaults-file=/opt/mysql-percona80/my.cnf --daemonize
           # 4) 简单健康检查
          sleep 5
          tail -n 200 /opt/mysql-percona80/log/error.log || true
          /opt/mysql-percona80/bin/mysql --protocol=socket --socket=/opt/mysql-percona80/mysql.sock -uroot -e "SELECT VERSION(); SHOW ENGINES\G"
          /opt/mysql-percona80/bin/mysql --protocol=socket --socket=/opt/mysql-percona80/mysql.sock -uroot -e "CREATE DATABASE t; USE t; CREATE TABLE a(id INT PRIMARY KEY) ENGINE=ROCKSDB; INSERT INTO a VALUES(1); SELECT * FROM a;"


      - name: Upload prebuild git package
        uses: actions/upload-artifact@v4
        with:
          name: mysql-percona80-ubuntu
          path: |
            ${{ github.workspace }}/*.xz
            ${{ github.workspace }}/*.zip

  build-in-centos7:
    runs-on: ubuntu-latest
    # needs: before_build
    timeout-minutes: 360 # 设置超时时间为6小时

    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h && free -h

      - name: Checkout v5
        uses: actions/checkout@v5    

      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          # curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
          # curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo

          # 定义镜像列表  "http://mirrors.aliyun.com/centos-vault/7.9.2009"
          MIRRORS=(
              "http://mirror.rackspace.com/centos-vault/7.9.2009"
              "https://mirror.nsc.liu.se/centos-store/7.9.2009"
              "https://linuxsoft.cern.ch/centos-vault/7.9.2009"
              "https://archive.kernel.org/centos-vault/7.9.2009"
              "https://vault.centos.org/7.9.2009"
          )

          # 初始化变量
          FASTEST_MIRROR=""
          FASTEST_TIME=99999

          echo "Testing mirror response times..."

          # 测试每个镜像的响应时间
          for MIRROR in "${MIRRORS[@]}"; do
              echo -n "Testing $MIRROR ... "
              # 使用 curl 测试响应时间
              TIME=$(curl -o /dev/null -s -w "%{time_total}\n" "$MIRROR")
              echo "$TIME seconds"

              # 比较响应时间，记录最快的镜像
              if (( $(echo "$TIME < $FASTEST_TIME" | bc -l) )); then
                  FASTEST_TIME=$TIME
                  FASTEST_MIRROR=$MIRROR
              fi
          done

          # 输出最快的镜像
          echo "-----------------------------------"
          echo "Fastest mirror: $FASTEST_MIRROR"
          echo "Response time: $FASTEST_TIME seconds"

          echo "[base]" > /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-Base" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/os/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[updates]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-updates" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/updates/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[extras]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-extras" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/extras/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[centosplus]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-centosplus" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/centosplus/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo

          yum clean all
          yum makecache
          yum install -y https://dl.fedoraproject.org/pub/archive/epel/7/x86_64/Packages/e/epel-release-7-14.noarch.rpm
          ls -lh /etc/yum.repos.d/

          yum -y install tzdata
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          yum update -y
          yum install -y flex bison ncurses-dev texinfo gcc gperf patch libtool automake g++ libncurses5-dev gawk subversion expat libexpat1-dev binutils-dev bc libcap-dev autoconf libgmp-dev build-essential pkg-config libmpc-dev libmpfr-dev autopoint gettext txt2man liblzma-dev libssl-dev libz-dev mercurial wget tar cmake zstd ninja-build lz4 liblz4-tool liblz4-dev lzma libc6-dev-i386 ncurses-devel expat-devel binutils-devel gmp-devel make pkgconfig mpfr-devel gettext-devel zlib-devel lz4-devel xz xz-devel glibc-devel.i686 which lld bzip2 glibc glibc-devel
          yum install -y pcre-devel zlib-devel make git wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd autoconf automake libtool zstd-devel
          yum install -y perl-Test-Simple perl-FindBin perl-IPC-Cmd perl-Text-Template perl-File-Compare perl-File-Copy perl-Data-Dumper
          yum install -y llvm llvm-devel clang clang-devel libstdc++-devel glibc-devel tree python3
          yum -y install \
            zip unzip rsync cmake3 ninja-build \
            jemalloc jemalloc-devel \
            libaio-devel \
            ncurses-devel \
            openssl-devel \
            gflags-devel \
            numactl-devel \
            openldap-devel \
            curl libcurl-devel \
            bison \
            systemd-devel \
            krb5-devel \
            readline-devel \
            lz4 lz4-devel \
            libedit-devel \
            libevent-devel \
            cyrus-sasl cyrus-sasl-devel cyrus-sasl-gssapi \
            libicu-devel \
            cyrus-sasl-devel cyrus-sasl-scram \
            libatomic \
            libtirpc libtirpc-devel

          # update git
          yum -y remove git
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum -y install git
          git --version

          # update my gcc
          curl -sLo /opt/gcc-indiff.zip ${{ env.gcc_indiff_centos7_url }}
          unzip /opt/gcc-indiff.zip -d /opt/gcc-indiff

          export PATH=/opt/gcc-indiff/bin:/usr/local/bin:/opt/cmake/bin:$PATH
          export CC=/opt/gcc-indiff/bin/gcc
          export CXX=/opt/gcc-indiff/bin/g++
          export VCPKG_FORCE_SYSTEM_BINARIES=1

          # install cmake3 
          curl -sLo cmake3.tar.gz https://github.com/Kitware/CMake/releases/download/v3.31.6/cmake-3.31.6-linux-x86_64.tar.gz
          tar -xzf cmake3.tar.gz
          mv cmake-3.31.6-linux-x86_64 /opt/cmake
          rm -f /usr/bin/cmake
          ln -sf /opt/cmake/bin/cmake /usr/bin/cmake

          # Build Ninja 1.12.1 from source (prebuilt may not run on CentOS 7)
          #curl -sLo ninja-1.12.1.tar.gz https://github.com/ninja-build/ninja/archive/refs/tags/v1.12.1.tar.gz
          #tar -xzf ninja-1.12.1.tar.gz
          #cd ninja-1.12.1
          #/opt/cmake/bin/cmake -B build -G "Ninja" -DCMAKE_BUILD_TYPE=Release
          #/opt/cmake/bin/cmake --build build -j"$(nproc)"
          #install -m 0755 build/ninja /usr/local/bin/ninja
          #cd ..
          #ninja --version  # should be 1.12.1

          

          git clone --filter=blob:none --depth 1 https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          export VCPKG_ROOT=$(pwd)/vcpkg

          # jemalloc 
          $VCPKG_ROOT/vcpkg install lz4 zstd snappy openssl zlib --triplet x64-linux
          git clone --filter=blob:none --depth 1 https://github.com/percona/percona-server.git -b 8.0
          cd percona-server
          git submodule update --init --recursive
          cd ..


          TRIPLET=x64-linux
          DEPS_SRC="$VCPKG_ROOT/installed/$TRIPLET"
          DEPS_DST="/opt/mysql-percona80"
          mkdir -p "$DEPS_DST"/{include,lib,lib64}

          # 2) 复制头文件与动态库（.so 与 .so.*）及 pkgconfig
          rsync -a "$DEPS_SRC/include/" "$DEPS_DST/include/"
          rsync -a "$DEPS_SRC/lib/"      "$DEPS_DST/lib/"      || true
          rsync -a "$DEPS_SRC/lib64/"    "$DEPS_DST/lib64/"    || true
          for d in lib lib64; do
            [[ -d "$DEPS_DST/$d/pkgconfig" ]] || mkdir -p "$DEPS_DST/$d/pkgconfig"
            rsync -a "$DEPS_SRC/$d/pkgconfig/" "$DEPS_DST/$d/pkgconfig/" 2>/dev/null || true
          done

          # build persona mysql
          mkdir -p percona-server/build percona-server/boost
          cd percona-server/build

          # 供 CMake/ld 查找 vcpkg 拷贝到 /opt 的头文件与库
          export CMAKE_PREFIX_PATH="$DEPS_DST${CMAKE_PREFIX_PATH:+:$CMAKE_PREFIX_PATH}"
          export CMAKE_LIBRARY_PATH="$DEPS_DST/lib:$DEPS_DST/lib64${CMAKE_LIBRARY_PATH:+:$CMAKE_LIBRARY_PATH}"
          export CMAKE_INCLUDE_PATH="$DEPS_DST/include${CMAKE_INCLUDE_PATH:+:$CMAKE_INCLUDE_PATH}"
          export PKG_CONFIG_PATH="/usr/lib64/pkgconfig:/usr/share/pkgconfig:$DEPS_DST/lib/pkgconfig:$DEPS_DST/lib64/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"

          # 链接期搜索路径(关键修复 -ljemalloc not found)
          export LIBRARY_PATH="/opt/gcc-indiff/lib64:$DEPS_DST/lib:$DEPS_DST/lib64${LIBRARY_PATH:+:$LIBRARY_PATH}"
          export LD_LIBRARY_PATH="/opt/gcc-indiff/lib64:$DEPS_DST/lib:$DEPS_DST/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"

          # 避免外部 protobuf 干扰
          unset PROTOC
          cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX=/opt/mysql-percona80 \
            -DCMAKE_EXE_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64 -Wl,--no-as-needed -ldl" \
            -DCMAKE_SHARED_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64 -Wl,--no-as-needed -ldl" \
            -DCMAKE_MODULE_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64 -Wl,--no-as-needed -ldl" \
            -DWITH_BOOST=boost -DDOWNLOAD_BOOST=1 -DWITH_BOOST=../boost \
            -DWITH_ROCKSDB=ON \
            -DWITH_LZ4=system -DWITH_ZSTD=system -DWITH_SNAPPY=system -DWITH_JEMALLOC=system \
            -DWITH_SSL=system -DOPENSSL_ROOT_DIR="$DEPS_DST" \
            -DWITH_PROTOBUF=bundled \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_RPATH='$ORIGIN/../lib:$ORIGIN/../lib64' \
            -DCMAKE_BUILD_RPATH='/opt/gcc-indiff/lib64:$ORIGIN/../lib:$ORIGIN/../lib64' \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \
            -DWITH_AUTHENTICATION_LDAP=ON \
            -DWITH_UNIT_TESTS=0 \
            -DWITH_DOCS=OFF -DWITH_MAN_PAGES=OFF
          # Ninja 默认详细，便于定位真实失败点
          cmake --build . -j"$(nproc)"
          cmake --install .

          cd /opt/mysql-percona80
          zip -r -q -9 /workspace/percona80-centos7-x86_64-$(date +'%Y%m%d_%H%M').xz .

          # free memory
          free -h
          sync
          echo 3 > /proc/sys/vm/drop_caches
          free -h && df -h
          # follow can not work,exit success
          exit 0
          EOF
          chmod +x build.sh

      - name: Build persona80 in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          docker run --cpus="$(nproc --all)" --privileged -u root --rm -v ${{ github.workspace }}:/workspace -w /workspace centos:7 /bin/bash -c "/workspace/build.sh -a x86"


      - name: Upload percona80 package
        uses: actions/upload-artifact@v4
        with:
          name: percona80-centos7
          path: |
            ${{ github.workspace }}/*.xz
            ${{ github.workspace }}/*.zip


  publish-release:
      needs: [build-in-ubuntu,build-in-centos7] 
      runs-on: ubuntu-latest

      steps:
        - uses: actions/checkout@v5
        - name: Restoring artifacts
          uses: actions/download-artifact@main
          with:
            path: ${{ github.workspace }}
            pattern: percona*-*
            merge-multiple: false
          
        - name: Release Tag
          id: release_tag
          run: |
            # sudo add-apt-repository ppa:ubuntu-toolchain-r/test
            # sudo apt update
            # sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
            # sudo apt upgrade
            sudo apt install -y chrony
            sudo systemctl enable chrony
            sudo systemctl start chrony
            sudo timedatectl set-timezone Asia/Shanghai
            timedatectl status
            echo "TAG_NAME=$(date +'%Y%m%d_%H%M')_percona80" >> $GITHUB_ENV

        - name: Create Release
          run: |
            set -xe
            # 使用 GitHub API 获取最后一次提交信息
            commit_info=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/percona/percona-server/commits \
            | jq -r '.[0] | "\(.commit.author.name) \(.commit.message) \(.commit.author.date)"')
            # 输出变量
            echo "Commit Info: $commit_info"
            echo -e "## 你好$(date) percona \n > $commit_info\n" > hello.md
            cat <<'EOF' >> hello.md
            Proxy download:
            ```bash         
            curl -#Lo gcc-indiff.zip "https://ghproxy.cfd/https://github.com/indiff/gcc-build/releases/download/${{ env.TAG_NAME }}/shitshit"
            ```
            
            Direct download:
            ```bash         
            curl -#Lo gcc-indiff.zip "https://github.com/indiff/gcc-build/releases/download/${{ env.TAG_NAME }}/shitshit"
            ```
            EOF
            sed -i "s/shitshit/${bname}/g" hello.md
            gh release create ${{ env.TAG_NAME }} -F hello.md "artifacts/*"
          env:
            GITHUB_TOKEN: ${{ github.token }}