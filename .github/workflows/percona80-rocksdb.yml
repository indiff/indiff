name: Build MySQL with RocksDB Engine

on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '**/mysql-rocksdb.yml'  
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  build-percona80-rocksdb:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout MySQL and RocksDB
        uses: actions/checkout@v5

      # Step 2: 安装依赖
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y systemd language-pack-zh-hans language-pack-zh-hans-base locales tree
          sudo locale-gen zh_CN.UTF-8; /usr/bin/localectl set-locale LANG=zh_CN.UTF-8 || true ; 
          /usr/bin/timedatectl set-timezone Asia/Shanghai || true; 
          /usr/bin/timedatectl set-ntp true || true;
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt upgrade
          # 安装GCC 14
          sudo apt install gcc-14
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 14
          gcc --version
          g++ --version
          make --version
            
            
          sudo apt-get update
          # protobuf-compiler libprotobuf-dev libprotoc-dev \
          sudo apt-get install -y \
            build-essential cmake ninja-build \
            libjemalloc-dev \
            libaio-dev \
            libncurses-dev \
            libssl-dev \
            libgflags-dev \
            libnuma-dev \
            libldap-dev libldap2-dev \
            curl libcurl4-openssl-dev bison libudev-dev libkrb5-dev libreadline-dev zlib1g-dev liblz4-dev libedit-dev libevent-dev libsasl2-dev libsasl2-modules-gssapi-mit libicu-dev libtirpc-dev

      # Step 3: 克隆 MySQL 源码
      - name: Clone MySQL Source
        run: |
          # git clone --filter=blob:none --depth 1 -b 8.0  https://github.com/mysql/mysql-server.git
          # git clone --filter=blob:none --depth 1 https://github.com/mysql/mysql-server.git
          git clone --filter=blob:none --depth 1 https://github.com/percona/percona-server.git -b 8.0
          cd percona-server
          git submodule update --init --recursive
          cd ..
          

      # Step 4: vcpkg
      - name: vcpkg
        run: |
          git clone --filter=blob:none --depth 1 https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          export VCPKG_ROOT=$(pwd)/vcpkg
          # 写入自定义 triplet
          # mkdir -p $VCPKG_ROOT/vcpkg-triplets
          # cat >$VCPKG_ROOT/vcpkg-triplets/x64-linux-static.cmake <<'EOF'
          # set(VCPKG_TARGET_ARCHITECTURE x64)
          # set(VCPKG_CMAKE_SYSTEM_NAME Linux)
          # set(VCPKG_CRT_LINKAGE dynamic)
          # set(VCPKG_LIBRARY_LINKAGE static)
          # set(VCPKG_BUILD_TYPE release)
          # EOF

          # 安装依赖（静态）
          # $VCPKG_ROOT/vcpkg install lz4 zstd snappy jemalloc openssl protobuf \
          #   --triplet x64-linux-static \
          #   --overlay-triplets=$VCPKG_ROOT/vcpkg-triplets
          #  protobuf
          $VCPKG_ROOT/vcpkg install lz4 zstd snappy jemalloc openssl --triplet x64-linux
          TRIPLET=x64-linux
          DEPS_SRC="$VCPKG_ROOT/installed/$TRIPLET"
          DEPS_DST="/opt/mysql-percona80"
          sudo mkdir -p "$DEPS_DST"/{include,lib,lib64}

          # 2) 复制头文件与动态库（.so 与 .so.*）及 pkgconfig
          sudo rsync -a "$DEPS_SRC/include/" "$DEPS_DST/include/"
          sudo rsync -a "$DEPS_SRC/lib/"      "$DEPS_DST/lib/"      || true
          sudo rsync -a "$DEPS_SRC/lib64/"    "$DEPS_DST/lib64/"    || true
          for d in lib lib64; do
            [[ -d "$DEPS_DST/$d/pkgconfig" ]] || mkdir -p "$DEPS_DST/$d/pkgconfig"
            sudo rsync -a "$DEPS_SRC/$d/pkgconfig/" "$DEPS_DST/$d/pkgconfig/" 2>/dev/null || true
          done



      # Step 6: 配置 MySQL 构建
      - name: Configure percona80 Build
        run: |
          set -xe
          export VCPKG_ROOT=$(pwd)/vcpkg
          DEPS_DST="/opt/mysql-percona80"
          mkdir -p percona-server/build percona-server/boost
          cd percona-server/build
          # cmake .. -LH
          # echo "*********************************************"

          # 供 CMake/ld 查找 vcpkg 拷贝到 /opt 的头文件与库
          export CMAKE_PREFIX_PATH="$DEPS_DST${CMAKE_PREFIX_PATH:+:$CMAKE_PREFIX_PATH}"
          export CMAKE_LIBRARY_PATH="$DEPS_DST/lib:$DEPS_DST/lib64${CMAKE_LIBRARY_PATH:+:$CMAKE_LIBRARY_PATH}"
          export CMAKE_INCLUDE_PATH="$DEPS_DST/include${CMAKE_INCLUDE_PATH:+:$CMAKE_INCLUDE_PATH}"
          export PKG_CONFIG_PATH="$DEPS_DST/lib/pkgconfig:$DEPS_DST/lib64/pkgconfig${PKG_CONFIG_PATH:+:$PKG_CONFIG_PATH}"
          # 链接期搜索路径（关键修复 -ljemalloc not found）
          export LIBRARY_PATH="$DEPS_DST/lib:$DEPS_DST/lib64${LIBRARY_PATH:+:$LIBRARY_PATH}"
          export LD_LIBRARY_PATH="$DEPS_DST/lib:$DEPS_DST/lib64${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"

          # 避免外部 protobuf 干扰
          unset PROTOC
          sudo cmake .. -G Ninja \
            -DCMAKE_INSTALL_PREFIX=/opt/mysql-percona80 \
            -DCMAKE_EXE_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64" \
            -DCMAKE_SHARED_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64" \
            -DCMAKE_MODULE_LINKER_FLAGS="-L$DEPS_DST/lib -L$DEPS_DST/lib64" \
            -DWITH_BOOST=boost -DDOWNLOAD_BOOST=1 -DWITH_BOOST=../boost \
            -DWITH_ROCKSDB=ON \
            -DWITH_LZ4=system -DWITH_ZSTD=system -DWITH_SNAPPY=system -DWITH_JEMALLOC=system \
            -DWITH_SSL=system -DOPENSSL_ROOT_DIR="$DEPS_DST" \
            -DWITH_PROTOBUF=bundled \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_INSTALL_RPATH='$ORIGIN/../lib:$ORIGIN/../lib64' \
            -DCMAKE_BUILD_RPATH='$ORIGIN/../lib:$ORIGIN/../lib64' \
            -DCMAKE_INSTALL_RPATH_USE_LINK_PATH=ON \
            -DWITH_UNIT_TESTS=0 \
            -DWITH_DOCS=OFF -DWITH_MAN_PAGES=OFF
          # Ninja 默认详细，便于定位真实失败点
          sudo cmake --build . -j"$(nproc)"
          sudo cmake --install .
          # sudo make install
            

      # Step 8: 安装 MySQL
      - name: Install percona80
        run: |
          cd /opt/mysql-percona80
          zip -r -q -9 /opt/mysql-percona80.xz .

      # Step 9: 配置 MySQL 并启用 RocksDB 存储引擎
      - name: Configure percona80 with RocksDB
        if: false
        run: |
          # 初始化数据目录
          sudo rm -rf /opt/mysql-percona80/data || true
          sudo mkdir -p /opt/mysql-percona80/{data,log,run,tmp}
          sudo chown -R "$USER":"$USER" /opt/mysql-percona80
          /opt/mysql-percona80/bin/mysqld --initialize-insecure --basedir=/opt/mysql-percona80 --datadir=/opt/mysql-percona80/data
          # 最小 my.cnf（启用 rocksdb 并设为默认引擎）
          cat >/opt/mysql-percona80/my.cnf <<'CNF'
          [mysqld]
          basedir=/opt/mysql-percona80
          datadir=/opt/mysql-percona80/data
          socket=/opt/mysql-percona80/mysql.sock
          pid-file=/opt/mysql-percona80/run/mysqld.pid
          log-error=/opt/mysql-percona80/log/error.log
          port=3306
          plugin-load-add=ha_rocksdb.so
          default-storage-engine=ROCKSDB
          rocksdb
          CNF

          # 2) 初始化（不读取系统配置，避免写 /var/log/mysql）
          /opt/mysql-percona80/bin/mysqld --no-defaults \
            --initialize-insecure \
            --basedir=/opt/mysql-percona80 \
            --datadir=/opt/mysql-percona80/data \
            --log-error=/opt/mysql-percona80/log/init.err

          # 3) 启动（非 root 不要 --user）
          /opt/mysql-percona80/bin/mysqld --defaults-file=/opt/mysql-percona80/my.cnf --daemonize
           # 4) 简单健康检查
          sleep 5
          tail -n 200 /opt/mysql-percona80/log/error.log || true
          /opt/mysql-percona80/bin/mysql --protocol=socket --socket=/opt/mysql-percona80/mysql.sock -uroot -e "SELECT VERSION(); SHOW ENGINES\G"
          /opt/mysql-percona80/bin/mysql --protocol=socket --socket=/opt/mysql-percona80/mysql.sock -uroot -e "CREATE DATABASE t; USE t; CREATE TABLE a(id INT PRIMARY KEY) ENGINE=ROCKSDB; INSERT INTO a VALUES(1); SELECT * FROM a;"


      - name: Upload prebuild git package
        uses: actions/upload-artifact@v4
        with:
          name: mysql-percona80-ubuntu
          path: |
            ${{ github.workspace }}/*.xz