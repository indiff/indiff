name: Build MySQL with RocksDB Engine

on:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - '**/mysql-rocksdb.yml'  
  # pull_request:
  #   branches:
  #     - main
  workflow_dispatch:

jobs:
  build-mysql-rocksdb:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出代码
      - name: Checkout MySQL and RocksDB
        uses: actions/checkout@v5

      # Step 2: 安装依赖
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y systemd language-pack-zh-hans language-pack-zh-hans-base locales tree
          sudo locale-gen zh_CN.UTF-8; /usr/bin/localectl set-locale LANG=zh_CN.UTF-8 || true ; 
          /usr/bin/timedatectl set-timezone Asia/Shanghai || true; 
          /usr/bin/timedatectl set-ntp true || true;
          sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          sudo apt update
          sudo apt upgrade
          # 安装GCC 14
          sudo apt install gcc-14
          sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-14 14
          gcc --version
          g++ --version
          make --version
            
            
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            libaio-dev \
            libncurses-dev \
            bison \
            zlib1g-dev \
            libssl-dev \
            libgflags-dev \
            libzstd-dev \
            libsnappy-dev \
            liblz4-dev \
            libnuma-dev libtirpc-dev

      # Step 3: 克隆 MySQL 源码
      - name: Clone MySQL Source
        run: |
          # git clone --filter=blob:none --depth 1 -b 8.0  https://github.com/mysql/mysql-server.git
          # git clone --filter=blob:none --depth 1 https://github.com/mysql/mysql-server.git
          git clone --filter=blob:none --depth 1 https://github.com/percona/percona-server.git -b 8.0
          cd percona-server
          git submodule update --init --recursive
          cd ..
          

      # Step 4: vcpkg
      - name: vcpkg
        run: |
          git clone --filter=blob:none --depth 1 https://github.com/microsoft/vcpkg.git
          ./vcpkg/bootstrap-vcpkg.sh
          export VCPKG_ROOT=$(pwd)/vcpkg
          # 写入自定义 triplet
          mkdir -p $VCPKG_ROOT/vcpkg-triplets
          cat >$VCPKG_ROOT/vcpkg-triplets/x64-linux-static.cmake <<'EOF'
          set(VCPKG_TARGET_ARCHITECTURE x64)
          set(VCPKG_CMAKE_SYSTEM_NAME Linux)
          set(VCPKG_CRT_LINKAGE dynamic)
          set(VCPKG_LIBRARY_LINKAGE static)
          set(VCPKG_BUILD_TYPE release)
          EOF

          # 安装依赖（静态）
          $VCPKG_ROOT/vcpkg install lz4 zstd snappy jemalloc openssl protobuf \
            --triplet x64-linux-static \
            --overlay-triplets=$VCPKG_ROOT/vcpkg-triplets
          # $VCPKG_ROOT/vcpkg install lz4 zstd snappy jemalloc openssl protobuf --triplet x64-linux-static

      # Step 6: 配置 MySQL 构建
      - name: Configure MySQL Build
        run: |
          export VCPKG_ROOT=$(pwd)/vcpkg
          sudo mkdir -p percona-server/build
          sudo mkdir -p percona-server/boost
          cd percona-server/build
          # cmake .. -LH
          # echo "*********************************************"
          cmake .. \
            -DCMAKE_INSTALL_PREFIX=/opt/mysql-percona80 \
            -DWITH_BOOST=boost \
            -DWITH_ROCKSDB=ON \
            -DWITH_SSL=system \
            -DDOWNLOAD_BOOST=1 \
            -DWITH_BOOST=../boost \
            -DWITH_UNIT_TESTS=OFF \
            -DCMAKE_BUILD_TYPE=Release \
            -DCMAKE_TOOLCHAIN_FILE="$VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake" \
            -DVCPKG_TARGET_TRIPLET=x64-linux-static \
            -DBUILD_SHARED_LIBS=OFF \
            -DWITH_LZ4=system \
            -DWITH_ZSTD=system \
            -DWITH_SNAPPY=system \
            -DWITH_JEMALLOC=system \
            -DWITH_SSL=system -DOPENSSL_USE_STATIC_LIBS=ON \
            -DWITH_PROTOBUF=system -DProtobuf_USE_STATIC_LIBS=ON \
            -DWITH_UNIT_TESTS=0
          cmake --build . -j"$(nproc)"
          make install
            

      # Step 8: 安装 MySQL
      - name: Install MySQL
        run: |
          cd /opt/mysql-percona80
          zip -r -q -9 /opt/mysql-percona80.xz .

      # Step 9: 配置 MySQL 并启用 RocksDB 存储引擎
      - name: Configure MySQL with RocksDB
        run: |
          # 初始化数据目录
          /opt/mysql-percona80/bin/mysqld --initialize-insecure --basedir=/opt/mysql-percona80 --datadir=/opt/mysql-percona80/data
          # 最小 my.cnf（启用 rocksdb 并设为默认引擎）
          cat >/etc/my.cnf <<'CNF'
          [mysqld]
          basedir=/opt/mysql-percona80
          datadir=/opt/mysql-percona80/data
          socket=/opt/mysql-percona80/mysql.sock
          port=3306
          plugin-load-add=ha_rocksdb.so
          default-storage-engine=ROCKSDB
          rocksdb
          CNF
          # 启动
          /opt/mysql-percona80/bin/mysqld --defaults-file=/etc/my.cnf --user=root &
          # 验证
          /opt/mysql-percona80/bin/mysql -uroot -e "SHOW ENGINES\G"
          /opt/mysql-percona80/bin/mysql -uroot -e "CREATE DATABASE t; USE t; CREATE TABLE a(id INT PRIMARY KEY) ENGINE=ROCKSDB; INSERT INTO a VALUES(1); SELECT * FROM a;"


      - name: Upload prebuild git package
        uses: actions/upload-artifact@v4
        with:
          name: mysql-percona80-ubuntu
          path: |
            ${{ github.workspace }}/*.xz