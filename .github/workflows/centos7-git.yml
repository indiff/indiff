name: CentOS7 git

on:
  push:
    branches:
      - main
    paths:
      - '**/centos7-git.yml'
  pull_request:
    branches:
      - main
  workflow_dispatch:

env:
  RE2C_VERSION: "4.2" # https://github.com/skvadrik/re2c/releases
  GIT_LFS_VERSION: "3.6.1" # https://github.com/git-lfs/git-lfs/releases
  GIT_VERSION: "2.49.0" # https://mirrors.edge.kernel.org/pub/software/scm/git/ https://github.com/git/git/releases
  # https://github.com/indiff/gcc-build/releases
  gcc_indiff_centos7_url: "https://github.com/indiff/gcc-build/releases/download/20250514_0934_16.0.0/gcc-indiff-centos7-16.0.0-x86_64-20250514_0932.xz"    
jobs:
  build-in-centos7:
    runs-on: ubuntu-latest
    timeout-minutes: 360 # 设置超时时间为6小时

    steps:
      - name: Free Disk-Space
        run: df -h && sudo apt-get clean && docker system prune -a -f && sudo rm -rf /usr/local/lib/android /usr/share/dotnet /opt/ghc && df -h && free -h

      - name: Checkout v4
        uses: actions/checkout@v4     

      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          # curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
          # curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo

          # 定义镜像列表  "http://mirrors.aliyun.com/centos-vault/7.9.2009"
          MIRRORS=(
              "http://mirror.rackspace.com/centos-vault/7.9.2009"
              "https://mirror.nsc.liu.se/centos-store/7.9.2009"
              "https://linuxsoft.cern.ch/centos-vault/7.9.2009"
              "https://archive.kernel.org/centos-vault/7.9.2009"
              "https://vault.centos.org/7.9.2009"
          )

          # 初始化变量
          FASTEST_MIRROR=""
          FASTEST_TIME=99999

          echo "Testing mirror response times..."

          # 测试每个镜像的响应时间
          for MIRROR in "${MIRRORS[@]}"; do
              echo -n "Testing $MIRROR ... "
              # 使用 curl 测试响应时间
              TIME=$(curl -o /dev/null -s -w "%{time_total}\n" "$MIRROR")
              echo "$TIME seconds"

              # 比较响应时间，记录最快的镜像
              if (( $(echo "$TIME < $FASTEST_TIME" | bc -l) )); then
                  FASTEST_TIME=$TIME
                  FASTEST_MIRROR=$MIRROR
              fi
          done

          # 输出最快的镜像
          echo "-----------------------------------"
          echo "Fastest mirror: $FASTEST_MIRROR"
          echo "Response time: $FASTEST_TIME seconds"

          echo "[base]" > /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-Base" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/os/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[updates]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-updates" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/updates/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[extras]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-extras" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/extras/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "[centosplus]"  >> /etc/yum.repos.d/CentOS-Base.repo
          echo "name=CentOS-centosplus" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "baseurl=${FASTEST_MIRROR}/centosplus/\$basearch/" >> /etc/yum.repos.d/CentOS-Base.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/CentOS-Base.repo

          yum clean all
          yum makecache
          yum install -y https://dl.fedoraproject.org/pub/archive/epel/7/x86_64/Packages/e/epel-release-7-14.noarch.rpm
          ls -lh /etc/yum.repos.d/

          yum -y install tzdata
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          yum update -y
          yum install -y flex bison ncurses-dev texinfo gcc gperf patch libtool automake g++ libncurses5-dev gawk subversion expat libexpat1-dev binutils-dev bc libcap-dev autoconf libgmp-dev build-essential pkg-config libmpc-dev libmpfr-dev autopoint gettext txt2man liblzma-dev libssl-dev libz-dev mercurial wget tar cmake zstd ninja-build lz4 liblz4-tool liblz4-dev lzma libc6-dev-i386 ncurses-devel expat-devel binutils-devel gmp-devel make pkgconfig mpfr-devel gettext-devel zlib-devel lz4-devel xz xz-devel glibc-devel.i686 which clang lld bzip2 glibc glibc-devel
          yum install -y pcre-devel zlib-devel make git wget sed perl-IPC-Cmd GeoIP GeoIP-devel zip systemd autoconf automake libtool zstd-devel
          yum install -y perl-Test-Simple perl-FindBin perl-IPC-Cmd perl-Text-Template perl-File-Compare perl-File-Copy perl-Data-Dumper
          yum install -y llvm llvm-devel clang clang-devel libstdc++-devel glibc-devel tree
          
          # echo "[buildlogs-devtoolset-9-centos-x86_64]" > /etc/yum.repos.d/centos7-devtoolset-9.repo
          # echo "name=devtoolset-9" >> /etc/yum.repos.d/centos7-devtoolset-9.repo
          # echo "baseurl=https://buildlogs.cdn.centos.org/c7-devtoolset-9.x86_64" >> /etc/yum.repos.d/centos7-devtoolset-9.repo
          # echo "gpgcheck=0" >> /etc/yum.repos.d/centos7-devtoolset-9.repo
          # echo "enabled=1" >> /etc/yum.repos.d/centos7-devtoolset-9.repo
          # yum -y update
          # yum -y install devtoolset-9 --nogpgcheck
          #scl enable devtoolset-9 bash
          #source /opt/rh/devtoolset-9/enable
          #gcc -v
          #make -v

          # Not using downloaded buildlogs-cdn-centos-x86_64/repomd.xml because it is older than what we have:
          # rm -f /etc/yum.repos.d/centos7-devtoolset-9.repo
          # yum clean all

          echo "[buildlogs-devtoolset-10-centos-x86_64]" > /etc/yum.repos.d/centos7-devtoolset-10.repo
          echo "name=devtoolset-10" >> /etc/yum.repos.d/centos7-devtoolset-10.repo
          echo "baseurl=https://buildlogs.cdn.centos.org/c7-devtoolset-10.x86_64" >> /etc/yum.repos.d/centos7-devtoolset-10.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/centos7-devtoolset-10.repo
          echo "enabled=1" >> /etc/yum.repos.d/centos7-devtoolset-10.repo
          yum -y update
          yum -y install devtoolset-10 --nogpgcheck
          scl enable devtoolset-10 bash
          source /opt/rh/devtoolset-10/enable
          gcc -v
          make -v

          # update my gcc
          # curl -sLo /opt/indiff-gcc.zip ${{ env.gcc_indiff_centos7_url }}
          # unzip /opt/indiff-gcc.zip -d /opt/indiff-gcc
          # yum install -y elfutils-devel
          # export CC=/opt/indiff-gcc/bin/gcc
          # export LD=/opt/indiff-gcc/bin/ld
          
          free -h

          # rm -f /etc/yum.repos.d/centos7-llvm.repo
          # echo "[centos7-13-llvm]" > /etc/yum.repos.d/centos7-llvm.repo
          # echo "name=CentOS-7 - llvm rh" >> /etc/yum.repos.d/centos7-llvm.repo
          # echo "baseurl=https://buildlogs.cdn.centos.org/c7-llvm-toolset-13.0.x86_64/" >> /etc/yum.repos.d/centos7-llvm.repo
          # echo "gpgcheck=0" >> /etc/yum.repos.d/centos7-llvm.repo
          # echo "enabled=1" >> /etc/yum.repos.d/centos7-llvm.repo
          # yum -y install llvm-toolset-13.0
          # scl enable llvm-toolset-13.0 bash
          # source /opt/rh/llvm-toolset-13.0/enable
          # clang --version

          # TODO: Add more dynamic option handling
          while getopts a: flag; do
            case "${flag}" in
              a) arch=${OPTARG} ;;
              *) echo "Invalid argument passed" && exit 1 ;;
            esac
          done

          # TODO: Better target handling
          case "${arch}" in
            "arm") TARGET="arm-eabi" ;;
            "arm64") TARGET="aarch64-elf" ;;
            "arm64gnu") TARGET="aarch64-linux-gnu" ;;
            # "x86") TARGET="x86_64-elf" ;;
            "x86") TARGET="x86_64-linux-gnu" ;;
          esac
          # Declare the number of jobs to run simultaneously
          JOBS=$(nproc --all)

          export WORK_DIR="$PWD"
          export PREFIX="$WORK_DIR/gcc-${arch}"
          export PATH="$PREFIX/bin:/usr/bin/core_perl:$PATH"
          # export OPT_FLAGS="-flto -flto-compression-level=10 -O3 -pipe -ffunction-sections -fdata-sections"
          export OPT_FLAGS="-flto-compression-level=10 -O2 -pipe -ffunction-sections -fdata-sections"
          export OPT_FLAGS=""
          rm -rf "$WORK_DIR"/{binutils,build-binutils,build-gcc,gcc}

          # update my gcc
          curl -sLo /opt/gcc-indiff.zip ${{ env.gcc_indiff_centos7_url }}
          unzip /opt/gcc-indiff.zip -d /opt/gcc-indiff
          yum install -y zstd zstd-devel
          # export LD_LIBRARY_PATH=$(find /usr -name libzstd.so.1):$LD_LIBRARY_PATH

          
          # update git
          yum -y remove git
          yum -y install https://packages.endpointdev.com/rhel/7/os/x86_64/endpoint-repo.x86_64.rpm
          yum -y install git
          git --version
          curl -s https://packagecloud.io/install/repositories/orchardit/general/script.rpm.sh | bash
          yum -y install python37-3.7.6-1.el7.x86_64
          python --version
          
          SETUP_INSTALL_PREFIX="/opt/git"
          # Require asciidoc and xmlto to build documents
          if [[ -z "$SETUP_INSTALL_PREFIX" ]]; then
              SETUP_INSTALL_PREFIX=/opt
          fi

          mkdir -p $SETUP_INSTALL_PREFIX/bin ;
          mkdir -p $SETUP_INSTALL_PREFIX/git ;
          cd $SETUP_INSTALL_PREFIX ;

          export PATH="$SETUP_INSTALL_PREFIX/bin:$PATH"
          if [[ ! -e "re2c-${{ env.RE2C_VERSION }}.tar.xz" ]]; then
              wget https://github.com/skvadrik/re2c/releases/download/${{ env.RE2C_VERSION }}/re2c-${{ env.RE2C_VERSION }}.tar.xz;
              if [[ $? -ne 0 ]]; then
                  rm -f re2c-${{ env.RE2C_VERSION }}.tar.xz;
              fi
          fi
          tar -axvf re2c-${{ env.RE2C_VERSION }}.tar.xz ;
          cd re2c-${{ env.RE2C_VERSION }} ;
          ./configure --prefix=$SETUP_INSTALL_PREFIX/re2c/${{ env.RE2C_VERSION }} --with-pic=yes;
          make CC=/opt/gcc-indiff/bin/gcc -j$(nproc) ;
          make install;

          if [[ -e "$SETUP_INSTALL_PREFIX/re2c/${{ env.RE2C_VERSION }}/bin" ]]; then
              for UPDATE_LNK in $SETUP_INSTALL_PREFIX/re2c/${{ env.RE2C_VERSION }}/bin/*; do
                  UNDATE_LNK_BASENAME="$(basename "$UPDATE_LNK")";
                  if [ -e "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME" ]; then
                      rm -rf "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME";
                  fi
                  ln -rsf "$UPDATE_LNK" "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME" ;
              done
          fi

          cd ..;

          if [[ ! -e "git-${{ env.GIT_VERSION }}.tar.xz" ]]; then
              wget https://mirrors.edge.kernel.org/pub/software/scm/git/git-${{ env.GIT_VERSION }}.tar.xz ;
              if [[ $? -ne 0 ]]; then
                  rm -f git-${{ env.GIT_VERSION }}.tar.xz;
              fi
          fi

          git clone https://github.com/Microsoft/vcpkg.git --depth 1
          cd vcpkg
          export VCPKG_ROOT=$(pwd)
          export PATH=$VCPKG_ROOT:$PATH
          ./bootstrap-vcpkg.sh
          ./vcpkg integrate install
          ./vcpkg install curl[openssl] openssl zlib expat --triplet x64-linux-dynamic
          cd ..

          tar -axvf git-${{ env.GIT_VERSION }}.tar.xz ;
          cd git-${{ env.GIT_VERSION }};
          # -L${VCPKG_ROOT}/installed/x64-linux/include/lib
          GIT_INSTALL_DIR=$SETUP_INSTALL_PREFIX/git/${{ env.GIT_VERSION }}
          mkdir -p $GIT_INSTALL_DIR/lib
          mkdir -p $GIT_INSTALL_DIR/lib64
          mkdir -p $GIT_INSTALL_DIR/include
          cp -v $VCPKG_ROOT/installed/x64-linux-dynamic/lib/*.so* $GIT_INSTALL_DIR/lib/ || true
          cp -v $VCPKG_ROOT/installed/x64-linux-dynamic/lib/*.so* $GIT_INSTALL_DIR/lib64/ || true
          cp -rv $VCPKG_ROOT/installed/x64-linux-dynamic/include/* $GIT_INSTALL_DIR/include/ || true
          
          ./configure --prefix=$GIT_INSTALL_DIR \
            CFLAGS="-Os -s -m64 -flto -flto-compression-level=9 -ffunction-sections -fdata-sections -pipe -w -fPIC" \
            LDFLAGS="-flto -flto-compression-level=9 -Wl,--gc-sections -Wl,-O2 -Wl,--compress-debug-sections=zlib -Wl,-rpath=\$\$ORIGIN/../../lib64:\$\$ORIGIN/../../lib" \
            --with-curl=$GIT_INSTALL_DIR --with-openssl=$GIT_INSTALL_DIR --with-libpcre2 \
            --with-zlib=$GIT_INSTALL_DIR --with-expat=$GIT_INSTALL_DIR --with-editor=vim  || cat config.log ;
          # NO_GETTEXT=1  Set NO_GETTEXT to disable localization support and make Git only
          # NO_GITWEB=1 
          make CC=/opt/gcc-indiff/bin/gcc NO_TCLTK=1 NO_PERL=1 \
            NO_SVN_TESTS=1 NO_IPV6=1 \
            NO_PYTHON=1 NO_TEST=1 \
            -j$(nproc) all ;
          make install

          if [[ -e "$SETUP_INSTALL_PREFIX/git/${{ env.GIT_VERSION }}/bin" ]]; then
              for UPDATE_LNK in $SETUP_INSTALL_PREFIX/git/${{ env.GIT_VERSION }}/bin/*; do
                  UNDATE_LNK_BASENAME="$(basename "$UPDATE_LNK")";
                  if [ -e "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME" ]; then
                      rm -rf "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME";
                  fi
                  ln -rsf "$UPDATE_LNK" "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME" ;
              done
          fi
          cd ../../../ ;
          mkdir -p git-lfs;
          cd git-lfs;

          # git lfs
          if [[ ! -e "git-lfs-linux-amd64-v${{ env.GIT_LFS_VERSION }}.tar.gz" ]]; then
              wget https://github.com/git-lfs/git-lfs/releases/download/v${{ env.GIT_LFS_VERSION }}/git-lfs-linux-amd64-v${{ env.GIT_LFS_VERSION }}.tar.gz ;
              if [[ $? -ne 0 ]]; then
                  rm -f git-lfs-linux-amd64-v${{ env.GIT_LFS_VERSION }}.tar.gz;
              fi
          fi

          mkdir git-lfs-v${{ env.GIT_LFS_VERSION }};
          cd git-lfs-v${{ env.GIT_LFS_VERSION }} ; 
          tar -axvf ../git-lfs-linux-amd64-v${{ env.GIT_LFS_VERSION }}.tar.gz ;
          ls -lh
          chmod +x ./git-lfs-${{ env.GIT_LFS_VERSION }}/install.sh
          mkdir -p $SETUP_INSTALL_PREFIX/git-lfs/v${{ env.GIT_LFS_VERSION }}
          env CC=/opt/gcc-indiff/bin/gcc PREFIX=$SETUP_INSTALL_PREFIX/git-lfs/v${{ env.GIT_LFS_VERSION }} ./git-lfs-${{ env.GIT_LFS_VERSION }}/install.sh ;

          if [[ -e "$SETUP_INSTALL_PREFIX/git-lfs/v${{ env.GIT_LFS_VERSION }}/bin" ]]; then
              for UPDATE_LNK in $SETUP_INSTALL_PREFIX/git-lfs/v${{ env.GIT_LFS_VERSION }}/bin/*; do
                  UNDATE_LNK_BASENAME="$(basename "$UPDATE_LNK")";
                  if [ -e "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME" ]; then
                      rm -rf "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME";
                  fi
                  ln -rsf "$UPDATE_LNK" "$SETUP_INSTALL_PREFIX/bin/$UNDATE_LNK_BASENAME" ;
              done
          fi

          cd ../../ ;

          cd $SETUP_INSTALL_PREFIX
          rm -f *.tar.xz
          rm -rf vcpkg
          rm -rf re2c-*
          rm -rf git-*
          /opt/gcc-indiff/bin/gcc -v > gcc.txt

          zname=/workspace/git-indiff-centos7-${GIT_VERSION}-x86_64-$(date +'%Y%m%d_%H%M')
          zip -r -q -9 $zname.zip .
          mv $zname.zip $zname.xz
          # ls -lh *.xz

          tree $SETUP_INSTALL_PREFIX
          
          # free memory
          free -h
          sync
          echo 3 > /proc/sys/vm/drop_caches
          free -h && df -h
          
          # get glibc Version
          echo $(cut -d- -f2 <<<$(rpm -q glibc)) >> /workspace/glibc_version.txt
          EOF
          chmod +x build.sh
          
      - name: Build git in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          sudo mkdir -p /opt
          sudo chown -R 777 /opt
          docker run --cpus="$(nproc --all)" --privileged -u root --rm -v ${{ github.workspace }}:/workspace -v /opt:/opt -w /workspace centos:7 /bin/bash -c "/workspace/build.sh -a x86"
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          export glib_version="$(cat glibc_version.txt)"
          export size_kb=$(du -k *.zip | head -n 1 | cut -f1)
          tree /opt

      - name: Upload prebuild git package
        uses: actions/upload-artifact@v4
        with:
          name: git-centos7
          path: |
            ${{ github.workspace }}/*.xz
  
  publish-release:
    #  build-in-centos6 can not buildss
    needs: [build-in-centos7] # build-arm64-tc,build-x86-tc,build-in-centos6
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Restoring artifacts
        uses: actions/download-artifact@main
        with:
          path: ${{ github.workspace }}
          pattern: git-*
          merge-multiple: false
        
      - name: Release Tag
        id: release_tag
        run: |
          # sudo add-apt-repository ppa:ubuntu-toolchain-r/test
          # sudo apt update
          # sudo add-apt-repository ppa:ubuntu-toolchain-r/ppa
          # sudo apt upgrade
          sudo apt install -y chrony
          sudo systemctl enable chrony
          sudo systemctl start chrony
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          
          echo "TAG_NAME=$(date +'%Y%m%d_%H%M')_${{ env.GIT_VERSION }}" >> $GITHUB_ENV

      - name: Create Release
        run: |
          set -xe
          # 使用 GitHub API 获取最后一次提交信息
          commit_info=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/git/git/commits \
          | jq -r '.[0] | "\(.commit.author.name) \(.commit.message) \(.commit.author.date)"')
          # 输出变量
          echo "Commit Info: $commit_info"
          echo -e "## 你好$(date) git ${{ env.GIT_VERSION }}\n > $commit_info\n" > hello.md
          bname=$(basename */*centos7*.xz)
          cat <<'EOF' >> hello.md

          |prefix|/opt/git|
          |:--:|:--:|
          | GIT_VERSION | ${{ env.GIT_VERSION }} |
          | RE2C_VERSION | ${{ env.RE2C_VERSION }} |
          | GIT_LFS_VERSION |  ${{ env.GIT_LFS_VERSION }} |

          Proxy download:
          ```bash         
          curl -#Lo git-indiff.zip "https://ghproxy.cfd/https://github.com/indiff/indiff/releases/download/${{ env.TAG_NAME }}/shitshit"
          ```
          
          Direct download:
          ```bash         
          curl -#Lo git-indiff.zip "https://github.com/indiff/indiff/releases/download/${{ env.TAG_NAME }}/shitshit"
          ```
          EOF
          sed -i "s/shitshit/${bname}/g" hello.md
          gh release create ${{ env.TAG_NAME }} -F hello.md */*.xz
        env:
          GITHUB_TOKEN: ${{ github.token }}